<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Give your puzzle a title, select the number of columns and rows, and then pick anywhere from 1 to 8 directions to orient the words.

Next, enter up to 24 words to make up your word list. Only letters are accepted, no puncation. Upper or lower case doesn't matter, all will be changed to upper case for the puzzle.

When you are ready, press Place Words to generate the puzzle. A check mark will appear next to each word if it was successfully added to the grid. If your grid is too small or the words too long, it may be unable to place  some words on the grid, in which case an X mark will appear. If this happens, try making the grid bigger, and Place Words again. Each time you use Place Words, it randomly picks the order of the words it works on, so it may be more successful.

To hide the words, press Fill. This will place random letters in all the blank cells. Pressing Fill again will place new random letters. Press UnFill to remove the random letters to see your puzzle solution again.

When you are happy with everything, simply use File &gt; Print to print out your puzzle. You can print out the "filled" puzzle, and also "unfilled" one, which will act as the solution page.

If you want to save your settings and word list, use File &gt; Save. The file type is *.wsf. This saves just the words, title, directions, and size. It doesn't save the actual grid. You can reopen the file later and regenerate the puzzle.


</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAABMLAAATCwAAAAAAAAAA
        AAD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AL8Avz9/AH9/fwB/f38Af39/AH9/fwB/f38Af39/AH9/fwB/f38Af39/AH9/fwB/f38A
        f3+/AL8/////AP///wB/AH9////////////i4eL//////+Lh4v///////////+Lh4v//////4uHi////
        ////////fwB/f////wD///8AfwB/f+Lh4v/i4eL/1NLU/+Lh4v+ioaL/f39//39/f/+ioaL/4uHi/9TS
        1P/i4eL/4uHi/38Af3////8A////AH8Af3///////////+Lh4v//////f39//8bDxv/Gw8b/f39/////
        ///i4eL///////////9/AH9/////AP///wB/AH9/4uHi/+Lh4v/U0tT/4uHi/3Fwcf+loqX/paKl/3Fw
        cf/i4eL/1NLU/+Lh4v/i4eL/fwB/f////wD///8AfwB/f///////////4uHi//////9/f3//xsPG/8bD
        xv9/f3///////+Lh4v///////////38Af3////8A////AH8Af3/i4eL/4uHi/3Fwcf9/f3//Pz8//6Wi
        pf+loqX/Pz8//39/f/9xcHH/f39//39/f/9/AH9/////AP///wB/AH9///////////9jYWP/xsPG/6Wi
        pf/Gw8b/xsPG/6Wipf/Gw8b/paKl/8bDxv/Gw8b/fwB/f////wD///8AfwB/f+Lh4v/i4eL/MTAx/2Nh
        Y/9SUVL/paKl/6Wipf9SUVL/Y2Fj/1JRUv9jYWP/Y2Fj/38Af3////8A////AH8Af3///////////+Lh
        4v//////f39//8bDxv/Gw8b/f39////////i4eL///////////9/AH9/////AP///wB/AH9/4uHi/+Lh
        4v/U0tT/4uHi/3Fwcf+loqX/paKl/3Fwcf/i4eL/1NLU/+Lh4v/i4eL/fwB/f////wD///8AfwB/f///
        ////////4uHi//////9/f3//xsPG/8bDxv9/f3///////+Lh4v///////////38Af3////8A////AH8A
        f39/f3//f39//3Fwcf9/f3//Pz8//2NhY/9jYWP/Pz8//39/f/9xcHH/f39//39/f/9/AH9/////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A//8AAIABAACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAIAB
        AAD//wAA//8AAA==
</value>
  </data>
</root>